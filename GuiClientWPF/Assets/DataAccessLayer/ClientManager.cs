using CommonRessources;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Windows.Shapes;
using AppLogic.ClientLogic;
using NetworkComponent = Core.Network.Component;

namespace GuiClientWPF
{
    public class ClientManager
    {
        private NetworkComponent currentGui;
        private IClientLogic logic;
        private readonly static ClientManager manager = new ClientManager();

        public static ClientManager Manager
        {
            get
            {
                return ClientManager.manager;
            }
            set
            {

            }
        }

        public ObservableCollection<Category> CathegoryCollection
        {
            get;
            set;
        }

        public ObservableCollection<Components> CanvasComponents
        {
            get;
            set;
        }

        public ClientManager()
        {
            logic = new  ClientLogic().LogicClient;
            CathegoryCollection = new ObservableCollection<Category>();
            CanvasComponents = new ObservableCollection<Components>();
            CathegoryCollection.Add(new Category() { Name = "Simple" });
            CathegoryCollection.Add(new Category() { Name = "Complex" });
            CathegoryCollection.Add(new Category() { Name = "Other" });
        }

        internal Task Disconnect()
        {
            var disconnectionTask = new Task(() => {
             logic.DisconnectFromServer();
            });

            disconnectionTask.Start();
            return disconnectionTask;
        }

        internal Task ConnectAction()
        {
            var connectionTask = new Task(() => { logic.ConnenctToServer("test"); });

            connectionTask.Start();
            return connectionTask;
        }

        internal Task SaveComponent(ICollection<Tuple<Rectangle, Rectangle>> componentList)
        {
            var saveTask = new Task(async () => {
                await logic.SaveComponent(this.GenerateComponent(componentList));
            });

            saveTask.Start();
            return saveTask;
       }

        internal Task LoadComponents()
        {
           var loadingComponentTask = new Task(async ()=>{
               var components = await logic.LoadComponents();
               foreach (var entry in components)
               {
               }
           });

           loadingComponentTask.Start();
           return loadingComponentTask;
        }

        private async Task<NetworkComponent> GenerateComponent(ICollection<Tuple<GuiComponent, GuiComponent, LineContainer>> componentList)
        {
            await NetworkGenerator(componentList);
        }

        private Task NetworkGenerator(ICollection<Tuple<GuiComponent, GuiComponent, LineContainer>> componentList)
        {
            var generator = new Task(async () =>
            {
                this.currentGui = new NetworkComponent()
                {
                    ComponentGuid = Guid.NewGuid(),
                    FriendlyName = "Autogenerated",
                    InputHints = await this.FindInputhints(componentList),
                    OutputHints = await this.FindOutPutHints(componentList),
                    //Edges = await this.GrenadeEdges(componentList),
                };
            });

            generator.Start();
            return generator;
        }

        private Task<IEnumerable<string>> FindOutPutHints(ICollection<Tuple<GuiComponent, GuiComponent, LineContainer>> componentList)
        {
            var findtask = new Task<IEnumerable<string>>(() => {
                var hintslist = new List<string>();
                var inputNodes = componentList.Where(information => !information.Item1.InputNodes.Any());
                return inputNodes.SelectMany(tupl => tupl.Item1.OutputNodes.Select(comp => comp.Hint)).ToList();
            });

            findtask.Start();
            return findtask;
        }

        private Task<IEnumerable<string>> FindInputhints(ICollection<Tuple<GuiComponent, GuiComponent, LineContainer>> componentList)
        {
            var findtask = new Task<IEnumerable<string>>(() =>
            {
                var hintslist = new List<string>();
                var outputNodes = componentList.Where(information => !information.Item1.OutputNodes.Any());
                return outputNodes.SelectMany(tupl => tupl.Item1.InputNodes.Select(comp => comp.Hint)).ToList();
            });

            findtask.Start();
            return findtask;
        }


//        private Task<IEnumerable<Core.Network.ComponentEdge>> GrenadeEdges(ICollection<Tuple<GuiComponent, GuiComponent, LineContainer>> componentList)
//        {
////            var task = new Task<IEnumerable<Core.Network.Component>>(async() =>
////            {
////                var list = new List<Core.Network.Component>();
                
////);
////                //return new List<Core.Network.Component>();
////            });
//        }



        internal void FillTestDataAsync()
        {
            this.CathegoryCollection[0].Components.Add(new SimpleComponent("Addition"));
            this.CathegoryCollection[0].Components.Add(new SimpleComponent("Substraction"));
            this.CathegoryCollection[0].Components.Add(new SimpleComponent("Division"));
            this.CathegoryCollection[0].Components.Add(new SimpleComponent("Multiplication"));

            this.CathegoryCollection[1].Components.Add(new ComplexComponent("Complex Addition"));
            this.CathegoryCollection[1].Components.Add(new ComplexComponent("Complex Substraction"));
            this.CathegoryCollection[1].Components.Add(new ComplexComponent("Complex Division"));
            this.CathegoryCollection[1].Components.Add(new ComplexComponent("Complex Multiplication"));

            this.CathegoryCollection[2].Components.Add(new SimpleComponent("Simple other Addition"));
            this.CathegoryCollection[2].Components.Add(new ComplexComponent("Complex other Substraction"));
            this.CathegoryCollection[2].Components.Add(new ComplexComponent("Complex other Division"));
            this.CathegoryCollection[2].Components.Add(new SimpleComponent("Simple otherMultiplication"));
        }

        internal void AddCanvasComponent(Guid? id)
        {
            if (id == null)
            {
                return;
            }

            var queryRes = CathegoryCollection.SelectMany(category => category.Components).SingleOrDefault(component => component.UniqueID == id);
            if (queryRes != null) 
                this.CanvasComponents.Add(queryRes);
        }

    }
}
